{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers/searchRobots.js","reducers/requestRobots.js","reducers/testSearch.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","ws","WebSocket","App","onRequestRobot","open","console","log","onclose","_this$props","pending","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_ErrorBoundry","components_SearchBox","src_components_Scroll","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","catch","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","testSearch","arguments","length","undefined","objectSpread","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6e5233c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow'>\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map(user => {\n          return (\n            <Card \n              key={user.id} \n              id={user.id} \n              name={user.name} \n              email={user.email}\n            />\n          );\n        })\n      }\n    </div>    \n  )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search robots'\n        onChange={ searchChange }\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props) => {\n  return (\n    <div className=\"scroll\">\n      { props.children }\n    </div>\n  )\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Opps !</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    pending: state.requestRobots.pending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobot: () => dispatch(requestRobots())\n  }\n}\n\nvar ws = new WebSocket('wss://echo.websocket.org');\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobot();\n\n    ws.open = () => console.log('connected');\n\n    // ws.onmessage = event => console.log(event.data)\n\n    ws.onclose = () => {\n      console.log('disconnected');\n      this.setState({ ws: ws });\n    }\n  }\n  \n  render() {\n    const { robots, pending, searchField, onSearchChange } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    if (pending) {\n      return <h1>Loading...</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <ErrorBoundry>\n            <h1 className='f1'>RoboFriends</h1>\n            <SearchBox searchChange={ onSearchChange }/>\n            <Scroll>\n              <CardList robots={ filteredRobots } />\n            </Scroll>\n          </ErrorBoundry>\n        </div>\n      )\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ON_FAILED,\n  REQUEST_ON_SUCCESS,\n  REQUEST_ON_PENDING \n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ON_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(robots => dispatch({ type: REQUEST_ON_SUCCESS, payload: robots }))\n  .catch(error => dispatch({ type: REQUEST_ON_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ON_PENDING = 'REQUEST_ON_PENDING';\nexport const REQUEST_ON_SUCCESS = 'REQUEST_ON_SUCCESS';\nexport const REQUEST_ON_FAILED = 'REQUEST_ON_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from '../constants';\n\nconst initialState = {\n  searchField: '',\n}\n\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload }\n    default:\n      return state;\n  }\n}\n","import { \n  REQUEST_ON_FAILED,\n  REQUEST_ON_SUCCESS,\n  REQUEST_ON_PENDING  \n} from '../constants';\n\nconst initialState = {\n  pending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialState, action = {}) => {\n  console.log(action.type);\n  switch(action.type) {\n    case REQUEST_ON_PENDING:\n      return { ...state, pending: action.payload }\n    case REQUEST_ON_SUCCESS:\n      return { ...state, robots: action.payload }\n    case REQUEST_ON_FAILED: \n      return { ...state, error: action.payload }\n    default:\n      return state\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from '../constants';\n\nconst initialState = {\n  searchField: '',\n}\n\nexport const testSearch = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, pending: true }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport { searchRobots } from './reducers/searchRobots';\nimport { requestRobots } from './reducers/requestRobots';\nimport { testSearch } from './reducers/testSearch';\n\nconst rootReducer = combineReducers({\n  testSearch,\n  searchRobots,\n  requestRobots,\n});\n\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={ store } >\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}